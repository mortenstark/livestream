--- a/browser.py
+++ b/browser.py
@@ -97,6 +97,12 @@ async def interactive_flow(page, tts_file, record_duration=60, monitor=True, deb
     if debug_mode:
         print(f"DEBUG: Audio file loaded: {tts_file}")
         print(f"DEBUG: Sample rate: {file_samplerate} Hz")
         print(f"DEBUG: Channels: {data.shape[1] if len(data.shape) > 1 else 1}")
         print(f"DEBUG: Duration: {len(data)/file_samplerate:.2f} seconds")
 
+        # Check if podcast is already in answer mode before playing audio
+        try:
+            is_already_answering = await page.query_selector('.user-speaking-animation[style*="display: none"]') is not None
+            if is_already_answering and debug_mode:
+                print("DEBUG: ⚠️ Podcast appears to already be in answer mode before playing audio")
+        except Exception:
+            pass
+
     # Resample til device'ets sample rate hvis nødvendigt
     target_samplerate = int(device_info['default_samplerate'])
     if file_samplerate != target_samplerate:
@@ -147,6 +153,14 @@ async def interactive_flow(page, tts_file, record_duration=60, monitor=True, deb
     if debug_mode:
         print("DEBUG: Audio playback completed")
 
+    # Check if podcast is already in answer mode immediately after playback
+    try:
+        is_already_answering = await page.query_selector('.user-speaking-animation[style*="display: none"]') is not None
+        if is_already_answering:
+            if debug_mode:
+                print("DEBUG: ✅ Podcast is already in answer mode after audio playback")
+            return await record_response(page, record_duration, debug_mode)
+    except Exception as e:
+        if debug_mode:
+            print(f"DEBUG: Error checking answer mode: {e}")
+
     # Vent lidt efter afspilning
     if debug_mode:
         print("DEBUG: Waiting 2 seconds after audio playback")
@@ -159,6 +173,19 @@ async def interactive_flow(page, tts_file, record_duration=60, monitor=True, deb
         print("DEBUG: Could not continue, podcast did not enter answer mode")
         return None
 
+    return await record_response(page, record_duration, debug_mode)
+
+async def record_response(page, record_duration=60, debug_mode=False):
+    """Helper function to record the podcast response"""
+    try:
+        # Start optagelse af hostens svar
+        if debug_mode:
+            print("DEBUG: Starting recording")
+        output_file = record_audio_from_output(
+            output_device_name=AUDIO_INPUT_DEVICE,
+            duration=record_duration,
+            output_dir=RECORDING_DIR,
+            monitor=monitor
+        )
+        if debug_mode:
+            print(f"DEBUG: Recording completed, output_file={output_file}")
+
+        if debug_mode:
+            print(f"DEBUG: ✅ Optagelse gemt som: {output_file}")
+        else:
+            print(f"✅ Optagelse gemt som: {output_file}")
+        return output_file
+    except Exception as e:
+        if debug_mode:
+            print(f"DEBUG: Error in record_response: {e}")
+        return None